# Text Mining

## Working with strings

```{python, eval=T}
import this
```

### String Types

```{python}
new_string = "This is a String"  # storing a string

print(f'ID: {id(new_string)}')  # shows the object identifier (address)
print(f'Type: {type(new_string)}')  # shows the object type
print(f'Value: {new_string}')  # shows the object value
```

```{python}
simple_string = 'Hello!' + " I'm a simple string"
print(simple_string)

# multi-line string, note the \n (newline) escape character automatically created
multi_line_string = """Hello I'm
a multi-line
string!"""

multi_line_string
print(multi_line_string)
```

Be careful when writing raw strings, regex will escape them.
```{python}
# Normal string with escape sequences leading to a wrong file path!
escaped_string = "C:\the_folder\new_dir\file.txt"
print(escaped_string)
```

In order to keep the backslashes, use `r''` to define a raw string:
```{python}
# raw string keeping the backslashes in its normal form
raw_string = r'C:\the_folder\new_dir\file.txt'
print(raw_string)
```

### Strings Operations
```{python}
# concatenation of variables and literals
s1 = 'Python ðŸ’»!'
'Hello ðŸ˜Š ' + s1
s1*5
```


## Regular Expressions
Regular expressions are a powerful tool for various kinds of string manipulation.
They are a domain specific language (DSL) that is present as a library in most modern programming languages, not just Python.

Regular expressions in Python can be accessed using the `re` module, which is part of the standard library. 